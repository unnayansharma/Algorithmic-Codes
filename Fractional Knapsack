// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

struct Item{
    int value;
    int weight;
};


 // } Driver Code Ends
//class implemented
/*
struct Item{
    int value;
    int weight;
};
*/


class Solution
{
    public:
    //Function to get the maximum total value in the knapsack.
    bool static comparison(Item a,Item b)
    {
        double val1=(double)a.value/(double)a.weight;
        double val2=(double)b.value/(double)b.weight;
        return (val1 > val2);
    }
    double fractionalKnapsack(int W, Item arr[], int n)
    {
        // Your code here
        double profit=0;
        //for(int i=0;i<n;i++)
        //{
        //    arr[i].value=arr[i].value/(double)arr[i].weight;
        //}
        sort(arr,arr+n,comparison);
        //for (int i = 0; i < n; i++)
        //cout << "[" << arr[i].value << "," << arr[i].weight
        //     << "] ";
        for(int i=0;i<n;i++)
        {
            if(W > 0)
            {
                if(W-arr[i].weight > 0)
                {
                    W=W-arr[i].weight;
                    profit+=arr[i].value;
                }
                else
                {
                    profit+=W*((double)arr[i].value/(double)arr[i].weight);
                    W=0;
                }
                    
            }
        }
        return profit;
    }
        
};


// { Driver Code Starts.
int main()
{
	int t;
	//taking testcases
	cin>>t;
	cout<<setprecision(2)<<fixed;
	while(t--){
	    //size of array and weight
		int n, W;
		cin>>n>>W;
		
		Item arr[n];
		//value and weight of each item
		for(int i=0;i<n;i++){
			cin>>arr[i].value>>arr[i].weight;
		}
		
		//function call
		Solution ob;
		cout<<ob.fractionalKnapsack(W, arr, n)<<endl;
	}
    return 0;
}  // } Driver Code Ends
